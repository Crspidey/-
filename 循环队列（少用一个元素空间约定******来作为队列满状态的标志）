//队列数据以int类型为例
#include<iostream>
using namespace std;
#define ERROR -2
#define QUEUC_INIT_SIZE 100
struct Queue
{
	int front;
	int rear;
	int*elem;
};
void InitQueuc(Queue&Q)//创建空队列
{
	Q.elem = (int*)malloc(QUEUC_INIT_SIZE * sizeof(int));
	if (!Q.elem)
		return;
	Q.front = 0;
	Q.rear = 0;
}
void DestroyQueuc(Queue&Q)//摧毁队列
{
	if (Q.elem)
	{
		delete Q.elem;
		Q.front = 0;
		Q.rear = 0;
	}
}
void ClearQueuc(Queue&Q)//请空队列
{
	if (Q.elem)
		Q.front = Q.rear = 0;
}
bool QueucEmpty(Queue Q)//判断队列是否为空
{
	if (Q.elem)
		return false;
	else
		return true;
}
int QueucLength(Queue Q)//返回队列长度
{
	if (Q.elem)
		return Q.rear - Q.front;
	else
		return ERROR;
}
void GetHead(Queue Q, int&e)//返回队首数据
{
	if (Q.elem&&Q.front != Q.rear)
		e = Q.elem[Q.front];
}
void EnQueuc(Queue &Q, int&e)//入队操作
{
	if ((Q.rear + 1) % QUEUC_INIT_SIZE == Q.front)
		return;
	Q.elem[Q.rear] = e;
	Q.rear = (Q.rear + 1) % QUEUC_INIT_SIZE;
}
void DelQueuc(Queue&Q, int&e)//出队操作
{
	if (Q.front == Q.rear)
		return;
	e = Q.elem[Q.front];
	Q.front = (Q.front + 1) % QUEUC_INIT_SIZE;
}
void TraverseQueuc(Queue&Q)//简单的遍历队列(可用其他函数来更好遍历)
{
	int i = Q.front;
	while (i != Q.rear)
	{
		cout << Q.elem[i] << endl;
		i++;
	}
}
