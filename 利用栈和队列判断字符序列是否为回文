#include<iostream>

using namespace std;

#define STACK_INIT_SIZE 100

#define STACKINCREMENT 10



//队列的链式存储结构

typedef struct QNode

{

char data;//

QNode*next;

}QNode, *QueuePtr;

struct LinkQueue {

QueuePtr front;

QueuePtr rear;

};

void InitQueue(LinkQueue&Q)

{

Q.front = new QNode;

Q.rear = new QNode;

Q.rear = Q.front;

if (!Q.front)

{

cout << "无法提供内存空间" << endl;

return;

}

else

Q.front->next = NULL;

}

void EnQueue(LinkQueue&Q, char e)//插入元素e为Q的新的队尾元素

{

QueuePtr p = new QNode;

if (!p)

{

cout << "内存分配失败" << endl;

return;

}

else {

p->data = e, p->next = NULL;

Q.rear->next = p;

Q.rear = p;

}

}

void DeQueue(LinkQueue&Q, char&e)//若队列不空，则删除Q的队头元素并用e返回其值

{

QueuePtr p = Q.front;

if (Q.front != Q.rear)

{

Q.front = Q.front->next;

e = Q.front->data;

delete p;

}

}













//栈的顺序存储结构

struct Stack

{

char *base;

    char *top;

int stacksize;//栈的空间大小

};

void InitStack(Stack&S)//构造一个空栈

{

S.base = (char*)malloc(STACK_INIT_SIZE * sizeof(char));

if (S.base == NULL)

cout << "内存分配失败，请重新尝试！";

else

{

S.top = S.base;

S.stacksize = STACK_INIT_SIZE;

}

}

void Push(Stack&S, char e)//入栈

{

if (S.base)

{



if (S.top - S.base >= S.stacksize)

{

S.base = (char*)realloc(S.base, (S.stacksize + STACKINCREMENT) * sizeof(char));

if (!S.base)

return;

S.top = S.base + S.stacksize;

S.stacksize += STACKINCREMENT;

}

*S.top = e;

S.top++;//？？？？（如果top指向最后一个内存空间，则top++得到的结果是什么）

}

}

void Pop(Stack&S, char&e)//出栈

{

if (S.top == S.base)

return;

e = *(S.top - 1);

S.top--;

}

int main()

{

LinkQueue Q;

InitQueue(Q);

Stack S;

InitStack(S);

char a;

char b;

char ch;

cin >> ch;

while (ch != '@') 

{

EnQueue(Q, ch);

Push(S, ch);

cin >> ch;

}

while (Q.front != Q.rear&&S.base!=S.top)

{

DeQueue(Q, a);

Pop(S, b);

if (a != b)

{

cout << "输入的字符序列不是回文！" << endl;

system("pause");

return 0;

}

}

cout << "输入的字符序列是回文！" << endl;

system("pause");

return 0;

}

